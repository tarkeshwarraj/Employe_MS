import userModel from "../models/userModel.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import validator from "validator";



//Create token with Role to sent it to useBrowser
const createToken = (id,role) => {
    return jwt.sign({ id, role }, process.env.JWT_SECRET);  //Jwt to create token with object ID
};

//Register User 

const registerUser = async(req, res) => {
    //destructure name,email,password,role and gender

    const {name,password,email,role = 'user',gender} = req.body;

    try{
        //checking the user is already exist or not
        const exist = await userModel.findOne({email});
        if(exist){
            return res.json({success:true, message: "User already exist"});
        }

        //Validating user email with validator
        if (!validator.isEmail(email)) {
            return res.json({ success: false, message: "Invalid email format" });
        }

        //check strong password
        if(password.length < 4){
            return res.json({success: false, message: "Please enter a Strong password"});
        }

        //hashing the password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password,salt);

        const newUser = new userModel({
            name: name,
            email: email,
            password: hashedPassword,
            gender: gender,
            role: role,
        })

        //now save the data to database with the help of model.The save() method is an asynchronous operation that returns a promise. When the promise resolves, it returns the saved document, which includes all the fields you provided as well as some additional fields automatically generated by MongoDB.
        const user = await newUser.save();

        //Token create and send it to browser

        const token = createToken(user._id);
        res.status(200).json({success: true, token});


    }catch(error){
        //Handle errors
        console.error("Error during user registration:", error);
        res.status(500).json({success: false, message: "Server error"});
    }


};

//login User
const loginUser = async(req, res, isAdmin = false) => {
    const {email, password} = req.body;

    
    try{
        //find the user by email
        const user = await userModel.findOne({email});
        if(!user) {
            return res.status(400).json({success: false, message: "Invalid email or password"});
        }

        //Check if login is for admin
        if(isAdmin && user.role !== 'admin'){
            return res.status(403).json({success: false, message: "Access denied. Only admins can log in. "})
        }

        //Compare provided password with stored hashed password
        const isPasswordCorrect = await bcrypt.compare(password, user.password);

        if(!isPasswordCorrect) {
            return res.status(400).json({success:false, message: "Invalid email or password"});
        }

        //If login successful, create a token with role
        const token = createToken(user._id, user.role);

        res.status(200).json({success: true, token});

    }catch(error){
        console.error("Error during user login:", error);
        res.status(500).json({success: false, message: "Server error"});
    }
};

const updateUser = async (req, res) => {
    const { userId } = req.body;

    const { address, pinCode, qualification,mobileNumber, fieldOfStudy, experience, jobCategory, salaryRange } = req.body;

    res.json({message: "I am the update function"})
    try{
        //UserId got or not
        if(!userId) {
            return res.status(400).json({success: false, message: "User ID is required"});
        }

        // Find user by ID and update fields
        const updatedUser = await userModel.findByIdAndUpdate(
            userId,
            { mobileNumber, qualification, address, fieldOfStudy, experience, jobCategory, salaryRange, pinCode },
           // { new: true, runValidators: true } // Return the updated document and run validation
        );

        //Check if User was found and updated
        if(!updatedUser) {
            return res.status(404).json({success: false, message: "User not found"});
        }

        //Response with updated user details
        res.status(200).json({success: true, user: updateUser});


    }catch(error){
        console.log("Error during user update:", error);
        res.status(500).json({ success: false, message: "Server error"});

    }
}


export {registerUser, loginUser, updateUser};